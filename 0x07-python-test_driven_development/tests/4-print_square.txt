# 4-print_square.txt

============================
How to Use 4-print_square.py
============================

This module defines a function that prints a square
``print_square()``. It will guide you on how to use the module
``4-print_square.py``.

Usage
=====

This function prints a square using the ``#`` character. The parameter ``size``
is used to determine the height and width of the square.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(4)
    ####
    ####
    ####
    ####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

::

    >>> print_square(1)
    #

::

    >>> print_square(2)
    ##
    ##

Invaid integers
===============

::

    >>> print_square("not an int")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(5.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(1+3j)
    Traceback (most recent call last):
    TypeError: size must be an integer

if ``size`` is less than Zero, a ValueError is raised.

::

    >>> print_square(-4)
    Traceback (most recent call last):
    ValueError: size must be >= 0

Note that type-checking occurs before valu checking.

::

    >>> print_square(-7.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

One Argument must be provided

::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'

::

    >>> print_square(2, 3)
    Traceback (most recent call last):
    TypeError: print_square() takes 1 positional argument but 2 were given

