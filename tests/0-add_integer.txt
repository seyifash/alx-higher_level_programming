# 0-add_integer.txt

============================
How to Use 0-add_integer.py
============================

This module defines a function that adds integers ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments
For numbers, that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2, -3)
    -1

It also works with floating-point values.

::

    >>> add_integer(2.0, 0.2)
    2

Note that floats are casted to ints before addition is performed.

::

    >>> add_integer(2.5, 3.7)
    5

::

    >>> add_integer(-1.5, -2.5)
    -4

Cases where floating and non-floating numbers can be combined

::

    >>> add_integer(10.5, 2)
    12

::

    >>> add_integer(4, 6.2)
    10

The second argument is optional - by default, it is 98.

::

    >>> add_integer(5)
    103

Non-Numbers
===========


``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("Note", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(4, "Note")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(5, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both argument are not integers or float, a TypeError is raised for just
the first argument

::

 >>> add_integer("-4", "note")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

>>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer


